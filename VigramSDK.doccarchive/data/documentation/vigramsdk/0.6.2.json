{"kind":"article","hierarchy":{"paths":[["doc:\/\/com.vigram.VigramSDK\/documentation\/VigramSDK"]]},"primaryContentSections":[{"kind":"content","content":[{"level":3,"type":"heading","anchor":"Actual-version-release","text":"Actual version release"},{"anchor":"What-is-the-new-on-this-release","text":"What is the new on this release","type":"heading","level":2},{"type":"heading","anchor":"Authentication","text":"Authentication","level":4},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Refactoring token verification","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The SDK authentication has been refactoring. The authentication method is remains the same. Usage:"}],"type":"paragraph"},{"code":["Vigram.initial(token: \"token\")",".check()",".sink { completion in ","    \/\/ do somethind with completion","} receiveValue: { result in","    switch(result) {","        case .success:","            \/\/ Successfull authentication","        case .failure(let error):","            \/\/ Do something with error","    }","}.store(in: &subscription)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can still also check the current validity of the token. Usage:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let tokenIsValid = Vigram.tokenIsValid()","","switch tokenIsValid {","case .success(let result):","    if result == true {","        \/\/\/ successful result","    } else {","       \/\/\/ not successful result","    }","case .failure(let error):","    \/\/\/ Error Handling AuthenticationError type","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now the SDK offline operation time after successful authentication is equal 14 days. After the first successful authentication, no additional method calls are required. Revalidation of an already authorized token is performed automatically after successfully connecting to the web and launching the SDK.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note: ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Endpoint for request:"}]},{"type":"text","text":" “https:\/\/api.zone.vigram.com\/tokenService\/”"}]},{"level":4,"type":"heading","text":"Peripheral","anchor":"Peripheral"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new protocol for working with the viDoc.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The protocol version and device version of the viDoc are checked and detected automatically on the SDK side."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variable isNewProtocol - return the version protocol of the viDoc."}]}]}]},{"syntax":"swift","code":["peripheral.isNewProtocol",".sink(receiveValue: { value in","    \/\/ false - the old protocol or true - the new protocol","}).store(in: &self.subscription)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note: Value is updated automatically"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variable currentDevice - return the device version of the viDoc."}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["peripheral.currentDevice",".sink(receiveValue: { value in","\/\/ value.hasFrontLaser","\/\/if false - laser is not supported (e.g. viDoc Light)","","\/\/ value.hasBottomLaser","\/\/ if false - laser is not supported (e.g. viDoc Light)","","\/\/ value.getHousing","\/\/ get current device housing (if available)","","\/\/ value.getMount ","\/\/ get current device mount (if available)","","switch value.typeOfDevice {","    case .viDoc:","        \/\/ viDoc with lasers","    case .viDocLight:","        \/\/ viDoc Light (without lasers)","    case .unknown:","        \/\/ Unknown device - SDK will be disconnect to this device","    case .viDocWithOldSoftware:","        \/\/ viDoc with old software","    case .viDocOldDevice:","        \/\/ viDoc (old Device)","    }","}).store(in: &self.subscription)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: Value is updated automatically"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Add new entities."}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["enum Housings: String {","    case unknown = \"unknown\"","    case printed3d = \"3D printed\"","    case aluminiumBlank = \"aluminium blank\"","    case eloxatedBlack = \"black eloxated\"","    case paintedBlack1 = \"black painted version 1\"","    case paintedBlack2 = \"black painted version 2\"","    case paintedGray = \"grey painted\"","    case paintedBlue = \"blue painted\"","    case paintedRed = \"red painted\"","}","","enum Mounts: String {","    case stands = \"stands for the mount\"","    case tablet = \"viDoc Tablet (old tablet mount)\"","    case spc = \"SPC\"","    case spcPlus = \"SPC+\"","    case spcPlusRegularly = \"SPC+ (regularly produced)\"","    case spcPlusBackPlate = \"SPC+ (backplate replaced)\"","}","","enum HardwareRevisions: String {","    case noMiniPCB = \"no mini PCB\"","    case withMiniPCB = \"with mini PCB\"","    case stateAtMarket = \"state at market entrance\"","    case withMiniPCBandIMUcalibrated = \"with mini PCB, IMU calibrated\"","}","","enum DeviceVersion {","    case viDoc","    case viDocLight","    case viDocWithOldSoftware","    case viDocOldDevice","    case unknown","}"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add new cases in PeripheralError."}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["\/\/ This method is not supported in current software version of","\/\/ the RTK device (new methods for old viDoc HW)","case requestIsNotSupported(String)","","\/\/ This method is not available in this case ","\/\/ (new methods for old protocol)","case accessDenied(String)","","\/\/ The current RTK device is incompatible in ","\/\/ this SDK version (unknown device)","case deviceNumberIsIncompatible","","\/\/ The current firmware of the connected RTK device is ","\/\/ incompatible in this SDK version (unknown HW)","case deviceFirmwareIsIncompatible"]},{"level":4,"text":"Laser service","type":"heading","anchor":"Laser-service"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Refactoring laser turnOn.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Lasers now operate more stably.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Refactoring laser measurements.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"On the old protocol version, the setting range for the measurement duration was 5…60. There was also no possibility to interrupt a measurement that had already started."}]},{"inlineContent":[{"type":"text","text":"The new version of the protocol has no restrictions on measurement time."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: If set the value to 0, the measurement will go on infinity. If need to terminate measurements, perform the command to turn off the laser. In new protocol turnLaserOff method will disabled both lasers in one command."},{"text":" ","type":"text"},{"text":"(Available only on the new protocol - HW of viDoc 0.2.1.(12) and up)","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Added get lasers status method","type":"text"}]}]}]},{"syntax":"swift","code":["laserService.getLasersStatus()",".sink(receiveCompletion: { completion in ","    \/\/ do somethind with completion","}) { result in","    switch result {","        case .backIsOn:","            \/\/ Back laser is on","        case .bothOff:","            \/\/ Both lasers are off","        case .bottomIsOn:","            \/\/ Bottom laser is on\"","        }","}.store(in: &subscription)"],"type":"codeListing"},{"inlineContent":[{"text":"Note: Available only on the new protocol - HW of viDoc 0.2.1.(12) and up","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/vigramsdk\/0.6.2"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"role":"article","roleHeading":"Article","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"VigramSDK"}],"title":"0.6.2"},"identifier":{"url":"doc:\/\/com.vigram.VigramSDK\/documentation\/VigramSDK\/0.6.2","interfaceLanguage":"swift"},"references":{"logo.png":{"identifier":"logo.png","variants":[{"url":"\/images\/logo.png","traits":["1x","light"]}],"type":"image","alt":"Vigram logo."},"doc://com.vigram.VigramSDK/documentation/VigramSDK":{"abstract":[],"title":"VigramSDK","identifier":"doc:\/\/com.vigram.VigramSDK\/documentation\/VigramSDK","type":"topic","url":"\/documentation\/vigramsdk","role":"collection","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}]}}}